# -*- coding: utf-8 -*-
"""rouge_metric.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OCt78srwz7uAw82n1IVpMnR8nZAScHgC

**ROUGE-N:** This method counts the number of n-grams (sequences of n words) that match between the candidate and the reference summaries. It can be used for different values of n, such as 1, 2, or 3. It measures the precision and recall of n-grams and computes an F-measure based on them.

**ROUGE-L:** This method counts the longest common subsequence (LCS) between the candidate and the reference summaries. LCS is the longest sequence of words that appears in both summaries in the same order, but not necessarily consecutively. It measures the precision and recall of LCS and computes an F-measure based on them.

**ROUGE-S:** This method counts the number of skip-bigrams (pairs of words that appear in both summaries in the same order, but not necessarily adjacent) that match between the candidate and the reference summaries. It measures the precision and recall of skip-bigrams and computes an F-measure based on them.

**ROUGE-W:** This method is similar to ROUGE-L, but it assigns higher weights to longer LCS. It measures the weighted precision and recall of LCS and computes an F-measure based on them
"""

!pip install rouge

from rouge import Rouge 
import os

ls

directory = "./"

baseline = 'AWS - 1 (trimmed)2 - gold_summary.txt'

# Loading the text file as a list of sentences
with open(baseline, mode='rt', encoding='utf-8') as fp:
  baseline_txt = fp.read()

print(baseline_txt)

global_scores = {
    
}

rouge = Rouge()

for filename in os.listdir(directory):
    if filename.endswith('.txt') and filename != baseline:
      # Loading the text file as a list of sentences
      with open(filename, mode='rt', encoding='utf-8') as fp:
          text_comparison = fp.read()
          scores = rouge.get_scores(text_comparison, baseline_txt)
          print(filename)
          print(scores)

          # save the scores in the global_scores dictionary

          global_scores[filename] = scores

          continue

    else:

      # skip the file

      continue

print(global_scores)

# define a key function that returns the rouge-1 value for a given filename

def get_rouge_1(filename):

    # get the scores dictionary for the filename

    scores = global_scores[filename]

    # get the rouge-1 score for the first sentence (assuming you only have one sentence per file)

    rouge_1 = scores[0]['rouge-1']

    # return the f-measure of rouge-1 (you can also use p or r for precision or recall)

    return rouge_1['f']

"""**ROUGE-1**  """

# sort the filenames by ascending rouge-1 value using the key function

sorted_filenames = sorted(global_scores.keys(), key=get_rouge_1)

sorted_scores = [(filename, get_rouge_1(filename)) for filename in sorted_filenames]

print(sorted_scores)

"""**ROUGE-2**"""

# define a key function that returns the rouge-1 value for a given filename

def get_rouge_2(filename):

    # get the scores dictionary for the filename

    scores = global_scores[filename]

    # get the rouge-1 score for the first sentence (assuming you only have one sentence per file)

    rouge_2 = scores[0]['rouge-2']

    # return the f-measure of rouge-1 (you can also use p or r for precision or recall)

    return rouge_2['f']

# sort the filenames by ascending rouge-2 value using the key function

sorted_filenames = sorted(global_scores.keys(), key=get_rouge_2)

sorted_scores = [(filename, get_rouge_2(filename)) for filename in sorted_filenames]

print(sorted_scores)

"""**ROUGE-L**"""

# define a key function that returns the rouge-1 value for a given filename

def get_rouge_l(filename):

    # get the scores dictionary for the filename

    scores = global_scores[filename]

    # get the rouge-1 score for the first sentence (assuming you only have one sentence per file)

    rouge_l = scores[0]['rouge-l']

    # return the f-measure of rouge-1 (you can also use p or r for precision or recall)

    return rouge_l['f']

# sort the filenames by ascending rouge-l value using the key function

sorted_filenames = sorted(global_scores.keys(), key=get_rouge_l)

sorted_scores = [(filename, get_rouge_l(filename)) for filename in sorted_filenames]

print(sorted_scores)